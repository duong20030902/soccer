@using Soccer.Font_end.ViewModels
@model UserProfileViewModel
@{
    ViewData["Title"] = "Hồ Sơ Của Tôi";
}

<style>
        /* Reuse and adapt CSS from ShopIndex for consistent design */
        .profile-hero {
            background: linear-gradient(135deg, #FF6B35 0%, #C1272D 100%);
            position: relative;
            padding: 80px 0;
            text-align: center;
            color: #FFFFFF;
            margin-bottom: 40px;
            overflow: hidden;
        }

            .profile-hero::before {
                content: '⚽';
                position: absolute;
                font-size: 15rem;
                opacity: 0.1;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                pointer-events: none;
            }

            .profile-hero h1 {
                font-size: 3rem;
                font-weight: 700;
                margin-bottom: 1rem;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                position: relative;
                z-index: 2;
            }

            .profile-hero p {
                font-size: 1.2rem;
                opacity: 0.95;
                max-width: 600px;
                margin: 0 auto;
                position: relative;
                z-index: 2;
            }

        .profile-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .profile-layout {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }

        /* Sidebar Navigation */
        .profile-sidebar {
            background: #FFFFFF;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(255, 107, 53, 0.15);
            padding: 24px;
            height: fit-content;
            position: sticky;
            top: 20px;
            border: 2px solid #FF8C42;
        }

        .nav-section {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #E0E0E0;
        }

            .nav-section:last-child {
                border-bottom: none;
                margin-bottom: 0;
            }

        .nav-title {
            font-size: 1.1rem;
            font-weight: 700;
            color: #2d3748;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

            .nav-title::before {
                content: '';
                width: 4px;
                height: 20px;
                background: linear-gradient(135deg, #FF6B35, #C1272D);
                border-radius: 2px;
            }

        .nav-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

            .nav-list li {
                margin-bottom: 8px;
            }

            .nav-list a {
                display: block;
                padding: 10px 14px;
                text-decoration: none;
                color: #2D3748;
                border-radius: 8px;
                transition: all 0.3s ease;
                font-weight: 500;
                border: 1px solid transparent;
            }

                .nav-list a:hover, .nav-list a.active {
    background: linear-gradient(135deg, #FF6B35, #FF8C42);
                    color: #FFFFFF;
                    transform: translateX(4px);
                    border-color: #C1272D;
                }

        /* Profile Content */
        .profile-section {
            background: #FFFFFF;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(255, 107, 53, 0.1);
            padding: 30px;
            border: 2px solid #FF8C42;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid #FFD23F;
        }

        .profile-card {
            background: #FFFFFF;
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 20px;
            border: 2px solid #E0E0E0;
            transition: all 0.3s ease;
        }

            .profile-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 8px 25px rgba(255, 107, 53, 0.2);
                border-color: #FF6B35;
            }

        .profile-field {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #E0E0E0;
        }

            .profile-field:last-child {
                border-bottom: none;
            }

        .field-label {
            font-weight: 600;
            color: #2D3748;
            font-size: 1rem;
        }

        .field-value {
            color: #718096;
            font-size: 1rem;
        }

        .address-list {
            display: grid;
            gap: 20px;
        }

        .address-card {
            background: #FFFFFF;
            border-radius: 12px;
            padding: 16px;
            border: 2px solid #E0E0E0;
            transition: all 0.3s ease;
        }

            .address-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 8px 25px rgba(255, 107, 53, 0.2);
                border-color: #FF6B35;
            }

        .address-info {
            font-size: 14px;
            color: #718096;
            line-height: 1.5;
        }

        .edit-btn {
            background: linear-gradient(135deg, #FF6B35, #C1272D);
            color: #FFFFFF;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            text-decoration: none;
        }

            .edit-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);
                background: linear-gradient(135deg, #C1272D, #8B0000);
            }

        /* Responsive */
        @@media (max-width: 768px) {
            .profile-layout {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .profile-sidebar {
                position: static;
            }

            .profile-hero {
                padding: 60px 0;
            }

                .profile-hero h1 {
                    font-size: 2rem;
                }

            .section-header {
    flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
        }

        @@media (max-width: 480px) {
            .profile-card, .address-card {
                padding: 12px;
            }

            .edit-btn {
                width: 100%;
                text-align: center;
            }
        }
</style>



<!-- Existing CSS (unchanged) -->
<style>
    .edit-form {
        display: none;
        margin-top: 20px;
        padding: 20px;
        background: #FFF0ED;
        border-radius: 12px;
        border: 2px solid #FF8C42;
    }

    .edit-form.active {
        display: block;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        font-weight: 600;
        color: #2D3748;
        margin-bottom: 5px;
        display: block;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #E0E0E0;
        border-radius: 8px;
        font-size: 1rem;
        color: #2D3748;
    }

    .form-group input.invalid {
        border-color: #C1272D;
    }

    .form-error {
        color: #C1272D;
        font-size: 12px;
        margin-top: 5px;
        display: none;
    }

    .form-error.show {
        display: block;
    }

    .form-actions {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .cancel-btn {
        background: #E0E0E0;
        color: #2D3748;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
    }

    .cancel-btn:hover {
        background: #D0D0D0;
        transform: translateY(-2px);
    }

    .address-form {
        margin-top: 10px;
        padding: 15px;
        background: #FFF0ED;
        border-radius: 8px;
        border: 1px solid #FF8C42;
    }

    .delete-btn {
        background: #C1272D;
        color: #FFFFFF;
        border: none;
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        font-size: 12px;
    }

    .delete-btn:hover {
        background: #8B0000;
        transform: translateY(-2px);
    }
</style>

<!-- Hero Section -->
<div class="profile-hero">
    <div class="profile-container">
        <h1>Hồ Sơ Của Bạn <span id="userFullName" style="color: #ffd700;"></span></h1>
        <p>Quản lý thông tin cá nhân, địa chỉ giao hàng và lịch sử mua sắm của bạn tại đây.</p>
    </div>
</div>

<div class="profile-container">
    <div class="profile-layout">
        <!-- Sidebar Navigation -->
        <aside class="profile-sidebar">
            <div class="nav-section">
                <div class="nav-title">📋 Quản Lý Tài Khoản</div>
                <ul class="nav-list">
                    <li><a href="/Account/Profile" class="active">Hồ Sơ</a></li>
                    <li><a href="/Account/Orders">Lịch Sử Đơn Hàng</a></li>
                    <li><a href="/Account/Addresses">Quản Lý Địa Chỉ</a></li>
                    <li><a href="/Account/ChangePassword">Đổi Mật Khẩu</a></li>
                    <li><a href="#" id="logoutLink">Đăng Xuất</a></li>
                </ul>
            </div>
        </aside>

        <!-- Profile Content -->
        <main class="profile-section">
            <div class="section-header">
                <h2 style="margin: 0; color: #2d3748; font-size: 1.5rem;">Thông Tin Cá Nhân</h2>
                <a href="#" class="edit-btn" id="editProfileBtn">✏️ Chỉnh Sửa</a>
            </div>

            <!-- User Information -->
            <div class="profile-card" id="profileCard">
                <div id="profileError" class="alert alert-danger" role="alert" style="display: none;"></div>
                <div class="profile-field">
                    <span class="field-label">Họ Tên</span>
                    <span class="field-value" id="fullName"></span>
                </div>
                <div class="profile-field">
                    <span class="field-label">Email</span>
                    <span class="field-value" id="email"></span>
                </div>
                <div class="profile-field">
                    <span class="field-label">Số Điện Thoại</span>
                    <span class="field-value" id="phone"></span>
                </div>
                <div class="profile-field">
                    <span class="field-label">Số Dư Tài Khoản</span>
                    <span class="field-value" id="balance"></span>
                </div>
                <div class="profile-field">
                    <span class="field-label">Vai Trò</span>
                    <span class="field-value" id="roleName"></span>
                </div>
                <div class="profile-field">
                    <span class="field-label">Trạng Thái</span>
                    <span class="field-value" id="isActive"></span>
                </div>
                <!-- Edit Profile Form -->
                <div class="edit-form" id="editProfileForm">
                    <div class="form-group">
                        <label for="editFullName">Họ Tên</label>
                        <input type="text" id="editFullName" placeholder="Nhập họ tên" autocomplete="off">
                        <div class="form-error" id="editFullNameError">Họ tên không được để trống hoặc chứa giá trị không hợp lệ.</div>
                    </div>
                    <div class="form-group">
                        <label for="editEmail">Email</label>
                        <input type="email" id="editEmail" placeholder="Nhập email" autocomplete="off">
                        <div class="form-error" id="editEmailError">Email không hợp lệ.</div>
                    </div>
                    <div class="form-group">
                        <label for="editPhone">Số Điện Thoại</label>
                        <input type="text" id="editPhone" placeholder="Nhập số điện thoại" autocomplete="off">
                        <div class="form-error" id="editPhoneError">Số điện thoại không hợp lệ (ít nhất 10 số).</div>
                    </div>
                    <div class="form-actions">
                        <button class="edit-btn" id="saveProfileBtn">Lưu</button>
                        <button class="cancel-btn" id="cancelProfileBtn">Hủy</button>
                    </div>
                </div>
            </div>

            <!-- Addresses -->
            <div class="section-header">
                <h2 style="margin: 0; color: #2d3748; font-size: 1.5rem;">Địa Chỉ Giao Hàng</h2>
                <a href="#" class="edit-btn" id="addAddressBtn">➕ Thêm Địa Chỉ</a>
            </div>

            <!-- Add/Edit Address Form -->
            <div class="edit-form address-form" id="addAddressForm">
                <div class="form-group">
                    <label for="addRecipientName">Tên Người Nhận</label>
                    <input type="text" id="addRecipientName" placeholder="Nhập tên người nhận" autocomplete="off">
                    <div class="form-error" id="addRecipientNameError">Tên người nhận không được để trống.</div>
                </div>
                <div class="form-group">
                    <label for="addStreetAddress">Địa Chỉ</label>
                    <input type="text" id="addStreetAddress" placeholder="Nhập địa chỉ" autocomplete="off">
                    <div class="form-error" id="addStreetAddressError">Địa chỉ không được để trống.</div>
                </div>
                <div class="form-group">
                    <label for="addCityProvince">Tỉnh/Thành Phố</label>
                    <input type="text" id="addCityProvince" placeholder="Nhập tỉnh/thành phố" autocomplete="off">
                    <div class="form-error" id="addCityProvinceError">Tỉnh/thành phố không được để trống.</div>
                </div>
                <div class="form-group">
                    <label for="addPostalCode">Mã Bưu Điện</label>
                    <input type="text" id="addPostalCode" placeholder="Nhập mã bưu điện" autocomplete="off">
                    <div class="form-error" id="addPostalCodeError">Mã bưu điện không được để trống.</div>
                </div>
                <div class="form-actions">
                    <button class="edit-btn" id="saveAddressBtn">Lưu</button>
                    <button class="cancel-btn" id="cancelAddressBtn">Hủy</button>
                </div>
            </div>

            <div class="address-list" id="addressList"></div>
        </main>
    </div>
</div>

@section Scripts {
    <script>
                $(document).ready(function () {
                    $('.nav-list a').on('click', function (e) {
                        if (this.id !== 'logoutLink') {
                            e.preventDefault();
        $('.nav-list a').removeClass('active');
                            $(this).addClass('active');
                            const href = $(this).attr('href');
                            if (href && href !== '#') {
                                window.location.href = href;
                            }
                        }
                    });

                    if (window.innerWidth <= 768) {
                        $('.profile-card, .address-card').on('click', function (e) {
                            if ($(e.target).is('a, button, input, select, textarea')) {
                                return;
                            }
                            $(this).find('.edit-btn')[0]?.click();
                        });
                    }

                    setTimeout(function () {
                        const profileContainer = document.querySelector('.profile-container');
                        if (profileContainer) {
                            profileContainer.scrollIntoView({ behavior: 'smooth' });
                        }
                    }, 100);
                });

                document.addEventListener("DOMContentLoaded", async function () {
                    let currentProfile = null;

                    // Get token
                    async function getToken() {
                        try {
                            const response = await fetch('https://api.soccer.soccertips.org/api/Auth/get-token', {
                                method: 'GET',
                                credentials: 'include',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            if (response.ok) {
                                const data = await response.json();
                                if (data.token) {
                                    sessionStorage.setItem('jwtToken', data.token);
                                    return { token: data.token, userName: data.userName };
                                }
                            }
                            return null;
                        } catch (error) {
                            console.error('Error getting token:', error);
                            return null;
                        }
                    }

                    // Validate email
                    function isValidEmail(email) {
                        return /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/.test(email);
                    }

                    // Validate phone
                    function isValidPhone(phone) {
                        return /^\+?\d{10,}$/.test(phone);
                    }

                    // Validate non-placeholder string
                    function isValidString(value) {
                        return value && value.trim() !== '' && value.trim() !== 'string';
                    }

                    // Fetch profile data
                    async function loadProfile() {
                        const authData = await getToken();
                        if (!authData || !authData.token) {
                            document.getElementById('profileError').textContent = 'Vui lòng đăng nhập để xem hồ sơ.';
                            document.getElementById('profileError').style.display = 'block';
                            window.location.href = '/Auth/Login';
                            return;
                        }

                        try {
        const response = await fetch('https://api.soccer.soccertips.org/api/account/profile', {
                                method: 'GET',
                                credentials: 'include',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${authData.token}`
                                }
                            });

                            if (!response.ok) {
                                throw new Error(`Lỗi HTTP: ${response.status}`);
                            }

                            currentProfile = await response.json();
                            console.log('Profile data:', currentProfile);

                            document.getElementById('userFullName').textContent = currentProfile.fullName || '';
                            document.getElementById('fullName').textContent = currentProfile.fullName || 'Chưa cung cấp';
                            document.getElementById('email').textContent = currentProfile.email || 'Chưa cung cấp';
                            document.getElementById('phone').textContent = currentProfile.phone || 'Chưa cung cấp';
                            document.getElementById('balance').textContent = (currentProfile.balance || 0).toLocaleString('vi-VN') + 'đ';
                            document.getElementById('roleName').textContent = currentProfile.roleName || 'Người Dùng';
                            document.getElementById('isActive').textContent = currentProfile.isActive ? 'Hoạt động' : 'Không hoạt động';

                            document.getElementById('editFullName').value = currentProfile.fullName || '';
                            document.getElementById('editEmail').value = currentProfile.email || '';
                            document.getElementById('editPhone').value = currentProfile.phone || '';

                            const addressList = document.getElementById('addressList');
                            addressList.innerHTML = '';
                            if (currentProfile.addresses && currentProfile.addresses.length > 0) {
                                currentProfile.addresses.forEach(address => {
                                    const addressCard = document.createElement('div');
                                    addressCard.className = 'address-card';
                                    addressCard.innerHTML = `
                                        <div class="address-info">
                                            <strong>${address.recipientName || 'Chưa cung cấp'}</strong><br />
                                            ${address.streetAddress || ''}, ${address.cityProvince || ''}, ${address.postalCode || ''}
                                        </div>
                                        <div style="margin-top: 10px;">
                                            <a href="#" class="edit-btn edit-address-btn" data-address-id="${address.addressId}" style="font-size: 12px; padding: 8px 16px;">✏️ Sửa</a>
                                            <button class="delete-btn delete-address-btn" data-address-id="${address.addressId}" style="margin-left: 10px;">🗑️ Xóa</button>
        </div>`;
                                    addressList.appendChild(addressCard);
                                });
                            } else {
                                addressList.innerHTML = '<p class="address-info">Chưa có địa chỉ nào được thêm.</p>';
                            }

                            updateAuthLinks(authData.userName);
                        } catch (error) {
                            console.error('Error loading profile:', error);
                            document.getElementById('profileError').textContent = `Không thể tải thông tin hồ sơ: ${error.message}`;
                            document.getElementById('profileError').style.display = 'block';
                        }
                    }

                    // Update auth links
                    function updateAuthLinks(userName) {
                        const authLinks = document.getElementById('authLinks');
                        if (!authLinks) return;

                        if (userName) {
                            authLinks.innerHTML = `
                                <li style="margin-left: 20px;">
                                    <div class="user-account-dropdown" id="userAccountDropdown">
                                        <button class="user-account-toggle" id="userAccountToggle">
                                            <div class="user-avatar">${userName.substring(0, 1).toUpperCase()}</div>
                                            <span>Xin chào, ${userName}</span>
                                            <span class="dropdown-arrow">▼</span>
                                        </button>
                                        <div class="user-dropdown-menu">
                                            <div class="user-dropdown-header">
                                                <div class="user-name">${userName}</div>
                                                <div class="user-role">Thành viên</div>
                                            </div>
                                            <ul>
                                                <li><a href="/Account/Profile"><i class="fa fa-user"></i> Hồ Sơ</a></li>
                                                <li><a href="/Account/Orders"><i class="fa fa-shopping-cart"></i> Lịch Sử Đơn Hàng</a></li>
                                                <li><a href="/Account/Addresses"><i class="fa fa-map-marker"></i> Quản Lý Địa Chỉ</a></li>
                                                <li><a href="/Account/ChangePassword"><i class="fa fa-lock"></i> Đổi Mật Khẩu</a></li>
                                                <li class="logout-link"><a href="#" id="logoutLink"><i class="fa fa-sign-out"></i> Đăng Xuất</a></li>
                                            </ul>
                                        </div>
                                    </div>
                                </li>`;
                            const userAccountToggle = document.getElementById('userAccountToggle');
                            if (userAccountToggle) {
                                userAccountToggle.addEventListener('click', function (e) {
                                    e.preventDefault();
        document.getElementById('userAccountDropdown').classList.toggle('active');
                                });
                            }
                        } else {
                            authLinks.innerHTML = `
                                <li><a href="/Auth/Login">Đăng nhập</a></li>
                                <li><a href="/Auth/Register">Đăng ký</a></li>`;
                        }
                    }

                    // Handle edit profile form toggle
                    document.getElementById('editProfileBtn').addEventListener('click', function (e) {
                        e.preventDefault();
                        document.getElementById('editProfileForm').classList.toggle('active');
                        document.getElementById('profileError').style.display = 'none';
                    });

                    // Handle cancel profile edit
                    document.getElementById('cancelProfileBtn').addEventListener('click', function (e) {
                        e.preventDefault();
                        document.getElementById('editProfileForm').classList.remove('active');
                        document.getElementById('editFullName').value = currentProfile.fullName || '';
                        document.getElementById('editEmail').value = currentProfile.email || '';
                        document.getElementById('editPhone').value = currentProfile.phone || '';
                        document.querySelectorAll('.form-error').forEach(el => el.classList.remove('show'));
                        document.querySelectorAll('input').forEach(el => el.classList.remove('invalid'));
                    });

                    // Handle save profile
                    document.getElementById('saveProfileBtn').addEventListener('click', async function () {
                        const token = sessionStorage.getItem('jwtToken');
                        if (!token) {
                            alert('Vui lòng đăng nhập lại.');
                            window.location.href = '/Auth/Login';
                            return;
                        }

                        const fullName = document.getElementById('editFullName').value.trim();
                        const email = document.getElementById('editEmail').value.trim();
                        const phone = document.getElementById('editPhone').value.trim();

                        let isValid = true;
                        if (!isValidString(fullName)) {
                            document.getElementById('editFullNameError').classList.add('show');
                            document.getElementById('editFullName').classList.add('invalid');
                            isValid = false;
                        } else {
                            document.getElementById('editFullNameError').classList.remove('show');
                            document.getElementById('editFullName').classList.remove('invalid');
                        }

                        if (!isValidString(email) || !isValidEmail(email)) {
                            document.getElementById('editEmailError').classList.add('show');
                            document.getElementById('editEmail').classList.add('invalid');
                            isValid = false;
                        } else {
        document.getElementById('editEmailError').classList.remove('show');
                            document.getElementById('editEmail').classList.remove('invalid');
                        }

                        if (!isValidString(phone) || !isValidPhone(phone)) {
                            document.getElementById('editPhoneError').classList.add('show');
                            document.getElementById('editPhone').classList.add('invalid');
                            isValid = false;
                        } else {
                            document.getElementById('editPhoneError').classList.remove('show');
                            document.getElementById('editPhone').classList.remove('invalid');
                        }

                        if (!isValid) {
                            document.getElementById('profileError').textContent = 'Vui lòng kiểm tra lại thông tin.';
                            document.getElementById('profileError').style.display = 'block';
                            return;
                        }

                        const updatedProfile = {};
                        if (fullName !== currentProfile.fullName) updatedProfile.fullName = fullName;
                        if (email !== currentProfile.email) updatedProfile.email = email;
                        if (phone !== currentProfile.phone) updatedProfile.phone = phone;

                        console.log('Profile update payload:', updatedProfile);

                        if (Object.keys(updatedProfile).length === 0) {
                            document.getElementById('editProfileForm').classList.remove('active');
                            document.getElementById('profileError').textContent = 'Không có thay đổi để lưu.';
                            document.getElementById('profileError').style.display = 'block';
                            return;
                        }

                        try {
                            const response = await fetch('https://api.soccer.soccertips.org/api/account/update/profile', {
                                method: 'PUT',
                                credentials: 'include',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${token}`
                                },
                                body: JSON.stringify(updatedProfile)
                            });

                            if (response.ok) {
                                document.getElementById('editProfileForm').classList.remove('active');
                                document.getElementById('profileError').style.display = 'none';
                                await loadProfile();
                                alert('Cập nhật hồ sơ thành công!');
                            } else {
                                const error = await response.json();
                                console.error('API error:', error);
                                document.getElementById('profileError').textContent = error.message || 'Lỗi khi cập nhật hồ sơ.';
                                document.getElementById('profileError').style.display = 'block';
                            }
                        } catch (error) {
        console.error('Error updating profile:', error);
                            document.getElementById('profileError').textContent = `Lỗi khi cập nhật hồ sơ: ${error.message}`;
                            document.getElementById('profileError').style.display = 'block';
                        }
                    });

                    // Handle add/edit address form toggle
                    document.getElementById('addAddressBtn').addEventListener('click', function (e) {
                        e.preventDefault();
                        document.getElementById('addAddressForm').classList.add('active');
                        document.getElementById('saveAddressBtn').dataset.addressId = '';
                        document.getElementById('addRecipientName').value = '';
                        document.getElementById('addStreetAddress').value = '';
                        document.getElementById('addCityProvince').value = '';
                        document.getElementById('addPostalCode').value = '';
                        document.querySelectorAll('.form-error').forEach(el => el.classList.remove('show'));
                        document.querySelectorAll('input').forEach(el => el.classList.remove('invalid'));
                        document.getElementById('profileError').style.display = 'none';
                    });

                    // Handle cancel add/edit address
                    document.getElementById('cancelAddressBtn').addEventListener('click', function (e) {
                        e.preventDefault();
                        document.getElementById('addAddressForm').classList.remove('active');
                        document.getElementById('saveAddressBtn').dataset.addressId = '';
                        document.getElementById('addRecipientName').value = '';
                        document.getElementById('addStreetAddress').value = '';
                        document.getElementById('addCityProvince').value = '';
                        document.getElementById('addPostalCode').value = '';
                        document.querySelectorAll('.form-error').forEach(el => el.classList.remove('show'));
                        document.querySelectorAll('input').forEach(el => el.classList.remove('invalid'));
                        document.getElementById('profileError').style.display = 'none';
                    });

                    // Handle save address
                    document.getElementById('saveAddressBtn').addEventListener('click', async function () {
                        const token = sessionStorage.getItem('jwtToken');
                        if (!token) {
                            alert('Vui lòng đăng nhập lại.');
                            window.location.href = '/Auth/Login';
                            return;
                        }

                        const recipientName = document.getElementById('addRecipientName').value.trim();
                        const streetAddress = document.getElementById('addStreetAddress').value.trim();
                        const cityProvince = document.getElementById('addCityProvince').value.trim();
                        const postalCode = document.getElementById('addPostalCode').value.trim();
        const addressId = document.getElementById('saveAddressBtn').dataset.addressId;

                        let isValid = true;
                        if (!isValidString(recipientName)) {
                            document.getElementById('addRecipientNameError').classList.add('show');
                            document.getElementById('addRecipientName').classList.add('invalid');
                            isValid = false;
                        } else {
                            document.getElementById('addRecipientNameError').classList.remove('show');
                            document.getElementById('addRecipientName').classList.remove('invalid');
                        }

                        if (!isValidString(streetAddress)) {
                            document.getElementById('addStreetAddressError').classList.add('show');
                            document.getElementById('addStreetAddress').classList.add('invalid');
                            isValid = false;
                        } else {
                            document.getElementById('addStreetAddressError').classList.remove('show');
                            document.getElementById('addStreetAddress').classList.remove('invalid');
                        }

                        if (!isValidString(cityProvince)) {
                            document.getElementById('addCityProvinceError').classList.add('show');
                            document.getElementById('addCityProvince').classList.add('invalid');
                            isValid = false;
                        } else {
                            document.getElementById('addCityProvinceError').classList.remove('show');
                            document.getElementById('addCityProvince').classList.remove('invalid');
                        }

                        if (!isValidString(postalCode)) {
                            document.getElementById('addPostalCodeError').classList.add('show');
                            document.getElementById('addPostalCode').classList.add('invalid');
                            isValid = false;
                        } else {
                            document.getElementById('addPostalCodeError').classList.remove('show');
                            document.getElementById('addPostalCode').classList.remove('invalid');
                        }

                        if (!isValid) {
                            document.getElementById('profileError').textContent = 'Vui lòng kiểm tra lại thông tin địa chỉ.';
                            document.getElementById('profileError').style.display = 'block';
                            return;
                        }

                        const newAddress = {
                            addressId: addressId ? parseInt(addressId) : 0,
                            recipientName,
                            streetAddress,
                            cityProvince,
                            postalCode
                        };

                        console.log('Address update payload:', [newAddress]);

                        try {
                            const response = await fetch('https://api.soccer.soccertips.org/api/account/address', {
                                method: 'PUT',
                                credentials: 'include',
                                headers: {
        'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${token}`
                                },
                                body: JSON.stringify([newAddress])
                            });

                            if (response.ok) {
                                document.getElementById('addAddressForm').classList.remove('active');
                                document.getElementById('saveAddressBtn').dataset.addressId = '';
                                document.getElementById('addRecipientName').value = '';
                                document.getElementById('addStreetAddress').value = '';
                                document.getElementById('addCityProvince').value = '';
                                document.getElementById('addPostalCode').value = '';
                                document.getElementById('profileError').style.display = 'none';
                                await loadProfile();
                                alert(addressId ? 'Cập nhật địa chỉ thành công!' : 'Thêm địa chỉ thành công!');
                            } else {
                                const error = await response.json();
                                console.error('API error:', error);
                                document.getElementById('profileError').textContent = error.message || 'Lỗi khi cập nhật địa chỉ.';
                                document.getElementById('profileError').style.display = 'block';
                            }
                        } catch (error) {
                            console.error('Error updating address:', error);
                            document.getElementById('profileError').textContent = `Lỗi khi cập nhật địa chỉ: ${error.message}`;
                            document.getElementById('profileError').style.display = 'block';
                        }
                    });

                    // Handle edit address
                    document.addEventListener('click', async function (e) {
                        if (e.target.classList.contains('edit-address-btn')) {
                            e.preventDefault();
                            const addressId = e.target.dataset.addressId;
                            const address = currentProfile.addresses.find(a => a.addressId == addressId);
                            if (!address) return;

                            document.getElementById('addRecipientName').value = address.recipientName || '';
                            document.getElementById('addStreetAddress').value = address.streetAddress || '';
                            document.getElementById('addCityProvince').value = address.cityProvince || '';
                            document.getElementById('addPostalCode').value = address.postalCode || '';
                            document.getElementById('addAddressForm').classList.add('active');
                            document.getElementById('saveAddressBtn').dataset.addressId = addressId;
                            document.getElementById('profileError').style.display = 'none';
                        }
                    });

                    // Handle delete address
                    document.addEventListener('click', async function (e) {
        if (e.target.classList.contains('delete-address-btn')) {
                            if (!confirm('Bạn có chắc muốn xóa địa chỉ này?')) return;

                            const token = sessionStorage.getItem('jwtToken');
                            if (!token) {
                                alert('Vui lòng đăng nhập lại.');
                                window.location.href = '/Auth/Login';
                                return;
                            }

                            const addressId = e.target.dataset.addressId;
                            try {
                                const response = await fetch(`https://api.soccer.soccertips.org/api/account/profile/address/${addressId}`, {
                                    method: 'DELETE',
                                    credentials: 'include',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'Authorization': `Bearer ${token}`
                                    }
                                });

                                if (response.ok) {
                                    document.getElementById('profileError').style.display = 'none';
                                    await loadProfile();
                                    alert('Xóa địa chỉ thành công!');
                                } else {
                                    const error = await response.json();
                                    console.error('API error:', error);
                                    document.getElementById('profileError').textContent = error.message || 'Lỗi khi xóa địa chỉ.';
                                    document.getElementById('profileError').style.display = 'block';
                                }
                            } catch (error) {
                                console.error('Error deleting address:', error);
                                document.getElementById('profileError').textContent = `Lỗi khi xóa địa chỉ: ${error.message}`;
                                document.getElementById('profileError').style.display = 'block';
                            }
                        }
                    });

                    // Update cart (unchanged)
                    async function updateCart() {
                        try {
                            const authData = await getToken();
                            const headers = {
                                'Content-Type': 'application/json',
                                'Authorization': authData ? `Bearer ${authData.token}` : ''
                            };

                            const response = await fetch('https://api.soccer.soccertips.org/api/cart/checkout', {
                                method: 'GET',
                                credentials: 'include',
                                headers
                            });

                            if (!response.ok) {
                                throw new Error(`Lỗi HTTP: ${response.status}`);
                            }

                            const data = await response.json();
                            const cartCount = data.reduce((total, item) => total + (item.quantity || 0), 0);
                            document.querySelectorAll('.cartitems').forEach(el => {
        el.textContent = cartCount;
                            });

                            const list = document.getElementById('cartItemsList');
                            if (!list) return;

                            list.innerHTML = '';
                            if (data.length === 0) {
                                list.innerHTML = '<li>Không có sản phẩm nào trong giỏ.</li>';
                            } else {
                                let totalCartPrice = 0;
                                data.forEach(item => {
                                    const productName = item.productName || 'Sản phẩm ID: ' + (item.productId || 'N/A');
                                    const quantity = item.quantity || 0;
                                    const unitPrice = item.unitPrice || 0;
                                    const imageUrl = item.imageUrl || '';
                                    const totalPrice = unitPrice * quantity;
                                    totalCartPrice += totalPrice;

                                    const li = document.createElement('li');
                                    li.innerHTML = `
                                        <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                                            ${imageUrl ? `<img src="${imageUrl}" alt="${productName}" style="width: 40px; height: 40px; object-fit: cover;" />` : ''}
                                            <div style="flex: 1;">
                                                <span>${productName}</span>
                                                <div>Số lượng: ${quantity}</div>
                                                <div>Giá tổng: ${totalPrice.toLocaleString('vi-VN')}đ</div>
                                            </div>
                                        </div>`;
                                    list.appendChild(li);
                                });

                                const totalLi = document.createElement('li');
                                totalLi.innerHTML = `<strong>Tổng giá giỏ hàng: ${totalCartPrice.toLocaleString('vi-VN')}đ</strong>
                                            <a href="/Cart/Checkout" class="btn btn-primary btn-sm">Xem chi tiết</a>`;
                                list.appendChild(totalLi);
                            }
                        } catch (error) {
                            console.error('Error updating cart:', error);
                            const list = document.getElementById('cartItemsList');
                            if (list) {
                                list.innerHTML = '<li>Lỗi khi tải giỏ hàng.</li>';
                            }
                        }
                    }

                    // Handle logout
                    document.addEventListener('click', async function (event) {
                        if (event.target && event.target.id === 'logoutLink') {
                            event.preventDefault();
                            const logoutLink = event.target;
                            const dropdown = document.getElementById('userAccountDropdown');
                            const userDropdownMenu = dropdown?.querySelector('.user-dropdown-menu');
        logoutLink.classList.add('logout-button-animate', 'clicked');
                            const originalText = logoutLink.innerHTML;
                            logoutLink.innerHTML = originalText + '<span class="logout-loading"></span>';
                            logoutLink.style.pointerEvents = 'none';

                            try {
                                const token = sessionStorage.getItem('jwtToken');
                                const response = await fetch('https://api.soccer.soccertips.org/api/Auth/logout', {
                                    method: 'POST',
                                    credentials: 'include',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'Authorization': `Bearer ${token}`
                                    }
                                });

                                if (response.ok) {
                                    logoutLink.classList.remove('clicked');
                                    logoutLink.classList.add('logout-success');
                                    logoutLink.innerHTML = '<i class="fa fa-check"></i> Đã đăng xuất';
                                    setTimeout(() => {
                                        if (userDropdownMenu) {
                                            userDropdownMenu.classList.add('closing');
                                        }
                                        setTimeout(() => {
                                            if (dropdown) {
                                                dropdown.classList.add('logout-fade');
                                            }
                                            setTimeout(() => {
                                                sessionStorage.removeItem('jwtToken');
                                                updateAuthLinks(null);
                                                window.location.href = '/Auth/Login';
                                            }, 400);
                                        }, 300);
                                    }, 800);
                                } else {
                                    throw new Error('Logout failed');
                                }
                            } catch (error) {
                                console.error('Logout error:', error);
                                logoutLink.classList.remove('clicked');
                                logoutLink.innerHTML = originalText;
                                logoutLink.style.pointerEvents = 'auto';
                                alert('Lỗi khi đăng xuất: ' + error.message);
                                updateAuthLinks(null);
                            }
                        }
                    });

                    await loadProfile();
                    await updateCart();
                });
    </script>
}