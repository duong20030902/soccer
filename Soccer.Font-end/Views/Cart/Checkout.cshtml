@using Soccer.Font_end.ViewModels
@model List<CartItemViewModel>
@{
    ViewData["Title"] = "Chi tiết giỏ hàng";
    string bankAccount = "CASS0356439203";
    string bankID = "OCB";
    string bankOwner = "Nguyen Viet Nam";
}

<!-- Use <text> to ensure CSS is not parsed as Razor code -->
<style>
    <text >
    /* Modern Cart Page Design - Đồng nhất với Shop Theme */
    .cart-page {
        padding: 20px 0;
        background: linear-gradient(135deg, #F8F9FA 0%, #E8F4FD 100%);
        min-height: 100vh;
    }

    .innerbannerwrap {
        background: linear-gradient(135deg, rgba(255, 107, 53, 0.9), rgba(193, 39, 45, 0.9)), url('/images/banner/background01.jpg') center/cover no-repeat;
        height: 250px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

        .innerbannerwrap::before {
            content: '🛒';
            position: absolute;
            font-size: 10rem;
            opacity: 0.1;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            pointer-events: none;
            color: #FFFFFF;
            animation: float 6s ease-in-out infinite;
        }

    float {
        0%, 100%

    {
        transform: translate(-50%, -50%) translateY(0px);
    }

    50% {
        transform: translate(-50%, -50%) translateY(-15px);
    }

    }

    .innerbanner {
        text-align: center;
        position: relative;
        z-index: 2;
    }

    .bannerHeadline {
        color: #FFFFFF;
        font-family: 'Oswald', sans-serif;
        font-size: 2.5rem;
        text-transform: uppercase;
        font-weight: 700;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.4);
        margin-bottom: 0.8rem;
        letter-spacing: 1.5px;
    }

        .bannerHeadline span {
            color: #FFD23F;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.6);
        }

    /* Container & Layout */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
    }

    .cart-header {
        text-align: center;
        margin-bottom: 20px;
        padding: 20px 15px;
        background: #FFFFFF;
        border-radius: 10px;
        box-shadow: 0 6px 20px rgba(255, 107, 53, 0.12);
        border: 2px solid #FF8C42;
        position: relative;
        overflow: hidden;
    }

        .cart-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #FF6B35, #FFD23F, #C1272D, #FF6B35);
            background-size: 200% 100%;
            animation: gradient-flow 3s linear infinite;
        }

    gradient-flow {
        0%

    {
        background-position: 0% 0%;
    }

    100% {
        background-position: 200% 0%;
    }

    }

    .heading.small {
        font-family: 'Oswald', sans-serif;
        font-size: 2rem;
        text-transform: uppercase;
        margin-bottom: 15px;
        background: linear-gradient(135deg, #C1272D, #FF6B35);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: 700;
        letter-spacing: 1px;
    }

    .heading span {
        color: #FFD23F;
    }

    .headParagraph {
        font-family: 'Open Sans', sans-serif;
        font-size: 1.2rem;
        color: #718096;
        max-width: 700px;
        margin: 0 auto;
        line-height: 1.5;
        font-weight: 500;
    }

    /* Cart Content Layout */
    .cart-content {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    /* Cart Table Section */
    .cart-table-section {
        background: #FFFFFF;
        border-radius: 10px;
        box-shadow: 0 8px 25px rgba(255, 107, 53, 0.12);
        padding: 10px; /* Reduced padding */
        border: 2px solid #FF8C42;
        position: relative;
        overflow: hidden;
        width: 100%;
        max-height: 200px; /* Reduced height */
        overflow-y: auto; /* Vertical scrolling */
    }

        .cart-table-section::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #FF6B35, #FFD23F, #C1272D, #FF6B35);
            border-radius: 10px;
            z-index: -1;
            opacity: 0.1;
        }

    .section-title {
        font-family: 'Oswald', sans-serif;
        font-size: 1.2rem; /* Reduced size */
        color: #2D3748;
        margin-bottom: 10px; /* Reduced margin */
        text-transform: uppercase;
        font-weight: 700;
        display: flex;
        align-items: center;
        gap: 6px; /* Reduced gap */
    }

        .section-title::before {
            content: '📋';
            font-size: 1rem; /* Reduced size */
        }

    .table-responsive {
        border-radius: 10px;
        overflow-x: auto; /* Horizontal scrolling */
        overflow-y: hidden; /* Prevent vertical scrollbar conflict */
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        min-width: 600px; /* Reduced width */
        white-space: nowrap;
    }

    .table {
        font-family: 'Open Sans', sans-serif;
        background-color: transparent;
        margin-bottom: 0;
        border-collapse: collapse;
        border-spacing: 0;
        width: 100%;
        table-layout: fixed;
    }

    .thead-dark th {
        background: linear-gradient(135deg, #FF6B35, #C1272D);
        color: #FFFFFF;
        font-family: 'Oswald', sans-serif;
        text-transform: uppercase;
        font-weight: 700;
        letter-spacing: 0.3px; /* Reduced spacing */
        border: none;
        padding: 6px 3px; /* Reduced padding */
        font-size: 0.6rem; /* Reduced size */
        position: relative;
        white-space: nowrap;
        width: 60px; /* Reduced width */
    }

        .thead-dark th::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 1px; /* Reduced height */
            background: #FFD23F;
        }

    .table td, .table th {
        padding: 4px 3px; /* Reduced padding */
        vertical-align: middle;
        text-align: center;
        border: none;
        border-bottom: 1px solid #F1F5F9;
        font-weight: 500;
        white-space: nowrap;
        width: 60px; /* Reduced width */
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .table tbody tr {
        transition: none;
        background: #FFFFFF;
    }

        .table tbody tr:hover {
            background: #FFFFFF;
            transform: none;
            box-shadow: none;
        }

        .table tbody tr:last-child td {
            border-bottom: none;
        }

    .table tfoot td {
        font-weight: 700;
        background: linear-gradient(135deg, #FFD23F, #FF8C42);
        color: #1A1A1A;
        font-size: 0.9rem; /* Reduced size */
        border: none;
        padding: 6px 3px; /* Reduced padding */
        text-transform: uppercase;
        letter-spacing: 0.3px; /* Reduced spacing */
        width: 80px; /* Adjusted width */
    }

    /* Product Image in Table */
    .product-image-cell img {
        width: 25px; /* Reduced size */
        height: 25px; /* Reduced size */
        object-fit: cover;
        border-radius: 3px; /* Reduced radius */
        border: 1px solid #E0E0E0;
        transition: all 0.3s ease;
    }

        .product-image-cell img:hover {
            border-color: #FF6B35;
            transform: scale(1.02); /* Reduced scale */
            box-shadow: 0 2px 5px rgba(255, 107, 53, 0.2);
        }

    /* Quantity Controls */
    .quantity-controls {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 3px; /* Reduced gap */
    }

    .btn-quantity {
        background: linear-gradient(135deg, #FF6B35, #C1272D);
        color: #FFFFFF;
        border: none;
        width: 16px; /* Reduced size */
        height: 16px; /* Reduced size */
        border-radius: 2px; /* Reduced radius */
        font-size: 0.6rem; /* Reduced size */
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .btn-quantity:hover {
            background: linear-gradient(135deg, #C1272D, #8B0000);
            transform: scale(1.02); /* Reduced scale */
        }

    .quantity-display {
        background: #FFD23F;
        color: #1A1A1A;
        padding: 1px 2px; /* Reduced padding */
        border-radius: 2px; /* Reduced radius */
        font-weight: 600;
        min-width: 18px; /* Reduced width */
        text-align: center;
    }

    /* Size Dropdown */
    .size-select {
        padding: 1px 2px; /* Reduced padding */
        border-radius: 2px; /* Reduced radius */
        border: 1px solid #FF6B35;
        background: #FFFFFF;
        font-family: 'Open Sans', sans-serif;
        font-weight: 600;
        color: #2D3748;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 35px; /* Reduced width */
    }

        .size-select:hover {
            border-color: #FFD23F;
            background: #F8F9FA;
        }

    /* Description Input */
    .description-input {
        padding: 1px 2px; /* Reduced padding */
        border-radius: 2px; /* Reduced radius */
        border: 1px solid #FF6B35;
        background: #FFFFFF;
        font-family: 'Open Sans', sans-serif;
        font-weight: 500;
        color: #2D3748;
        width: 45px; /* Reduced width */
        transition: all 0.3s ease;
    }

        .description-input:focus {
            border-color: #FFD23F;
            outline: none;
            box-shadow: 0 0 2px rgba(255, 107, 53, 0.2);
        }

    /* Remove Button */
    .btn-remove {
        background: linear-gradient(135deg, #C1272D, #8B0000);
        color: #FFFFFF;
        border: none;
        padding: 2px 5px; /* Reduced padding */
        border-radius: 2px; /* Reduced radius */
        font-family: 'Oswald', sans-serif;
        text-transform: uppercase;
        font-weight: 700;
        font-size: 0.5rem; /* Reduced size */
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-remove:hover {
            background: linear-gradient(135deg, #FF6B35, #C1272D);
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(255, 107, 53, 0.2);
        }

    /* Payment Summary Section */
    .payment-summary {
        background: #FFFFFF;
        border-radius: 10px;
        box-shadow: 0 8px 25px rgba(255, 107, 53, 0.12);
        padding: 15px;
        border: 2px solid #FF8C42;
        height: fit-content;
        position: sticky;
        top: 15px;
    }

    .summary-title {
        font-family: 'Oswald', sans-serif;
        font-size: 1.4rem;
        color: #2D3748;
        margin-bottom: 15px;
        text-transform: uppercase;
        font-weight: 700;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .summary-title::before {
            content: '💰';
            font-size: 1.2rem;
        }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #F1F5F9;
        font-family: 'Open Sans', sans-serif;
        font-weight: 500;
    }

        .summary-row:last-child {
            border-bottom: none;
            margin-top: 8px;
            padding: 10px 0;
            background: linear-gradient(135deg, #FFD23F, #FF8C42);
            margin: 10px -10px -10px;
            padding-left: 10px;
            padding-right: 10px;
            border-radius: 0 0 8px 8px;
            font-weight: 700;
            font-size: 1.1rem;
            color: #1A1A1A;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

    /* Buttons */
    .btn-red {
        background: linear-gradient(135deg, #FF6B35, #C1272D);
        color: #FFFFFF;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-family: 'Oswald', sans-serif;
        text-transform: uppercase;
        font-weight: 700;
        font-size: 0.9rem;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(255, 107, 53, 0.3);
        width: 100%;
        position: relative;
        overflow: hidden;
    }

        .btn-red::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn-red:hover::before {
            left: 100%;
        }

        .btn-red:hover {
            background: linear-gradient(135deg, #C1272D, #8B0000);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(255, 107, 53, 0.4);
            color: #FFFFFF;
        }

    /* QR Code Section */
    .qr-container {
        background: #FFFFFF;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 8px 25px rgba(255, 107, 53, 0.12);
        text-align: center;
        border: 2px solid #FF8C42;
        margin-top: 15px;
        position: relative;
        overflow: hidden;
    }

        .qr-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #FF6B35, #FFD23F, #C1272D);
            background-size: 200% 100%;
            animation: gradient-flow 3s linear infinite;
        }

        .qr-container h4 {
            font-family: 'Oswald', sans-serif;
            font-size: 1.6rem;
            background: linear-gradient(135deg, #C1272D, #FF6B35);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 15px;
            text-transform: uppercase;
            font-weight: 700;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

            .qr-container h4::before {
                content: '📱';
                font-size: 1.3rem;
                -webkit-text-fill-color: initial;
            }

    .payment-info {
        margin-bottom: 15px;
        font-family: 'Open Sans', sans-serif;
        color: #2D3748;
        background: linear-gradient(135deg, #FFF8F6, #FFF0ED);
        padding: 15px;
        border-radius: 8px;
        border: 2px solid #FFD23F;
        position: relative;
    }

        .payment-info::before {
            content: '💳';
            position: absolute;
            top: -10px;
            left: 15px;
            background: #FFFFFF;
            padding: 4px 8px;
            border-radius: 50%;
            font-size: 1.1rem;
            border: 2px solid #FFD23F;
        }

        .payment-info p {
            margin: 8px 0;
            font-size: 0.9rem;
            line-height: 1.4;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 4px 0;
            border-bottom: 1px solid #E0E0E0;
        }

            .payment-info p:last-child {
                border-bottom: none;
            }

            .payment-info p strong {
                color: #C1272D;
                font-weight: 700;
                font-family: 'Oswald', sans-serif;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

    .qr-image-wrapper {
        margin: 15px 0;
        padding: 15px;
        background: linear-gradient(135deg, #F8F9FA, #E8F4FD);
        border-radius: 8px;
        border: 2px dashed #FF6B35;
        position: relative;
    }

        .qr-image-wrapper::before {
            content: '⚡';
            position: absolute;
            top: 6px;
            right: 10px;
            font-size: 1.1rem;
            opacity: 0.6;
            animation: pulse 2s infinite;
        }

    pulse {
        0%, 100%

    {
        opacity: 0.6;
        transform: scale(1);
    }

    50% {
        opacity: 1;
        transform: scale(1.05);
    }

    }

    #qrcodeImg {
        width: 150px;
        height: 150px;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(255, 107, 53, 0.2);
        border: 2px solid #FFFFFF;
        transition: all 0.3s ease;
    }

        #qrcodeImg:hover {
            transform: scale(1.03);
            box-shadow: 0 6px 15px rgba(255, 107, 53, 0.3);
        }

    #spinner {
        margin: 15px auto;
        border: 4px solid #FFD23F;
        border-radius: 50%;
        border-top: 4px solid #FF6B35;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
    }

    spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    #successMessage {
        color: #28a745;
        font-family: 'Oswald', sans-serif;
        font-weight: 700;
        margin-top: 10px;
        font-size: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        padding: 10px;
        background: linear-gradient(135deg, #D4EDDA, #C3E6CB);
        border-radius: 8px;
        border: 2px solid #28a745;
        position: relative;
        overflow: hidden;
    }

        #successMessage::before {
            content: '✅';
            margin-right: 6px;
            font-size: 1.2rem;
        }

    /* Alert Styling */
    .alert {
        padding: 12px 15px;
        border-radius: 8px;
        margin-bottom: 15px;
        font-family: 'Open Sans', sans-serif;
        font-weight: 600;
        font-size: 0.9rem;
        border: 2px solid;
    }

    .alert-danger {
        background: linear-gradient(135deg, #F8D7DA, #F5C6CB);
        border-color: #DC3545;
        color: #721C24;
    }

        .alert-danger::before {
            content: '⚠️ ';
            font-size: 1rem;
            margin-right: 4px;
        }

    /* Empty Cart State */
    .empty-cart {
        text-align: center;
        padding: 40px 15px;
        background: #FFFFFF;
        border-radius: 10px;
        box-shadow: 0 6px 20px rgba(255, 107, 53, 0.12);
        border: 2px solid #FF8C42;
    }

        .empty-cart::before {
            content: '🛒';
            font-size: 5rem;
            opacity: 0.3;
            display: block;
            margin-bottom: 10px;
        }

        .empty-cart h3 {
            font-family: 'Oswald', sans-serif;
            font-size: 1.6rem;
            color: #2D3748;
            margin-bottom: 10px;
            text-transform: uppercase;
        }

        .empty-cart p {
            font-family: 'Open Sans', sans-serif;
            color: #718096;
            font-size: 0.9rem;
            margin-bottom: 15px;
        }

    .btn-shop {
        background: linear-gradient(135deg, #FFD23F, #FF8C42);
        color: #1A1A1A;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-family: 'Oswald', sans-serif;
        text-transform: uppercase;
        font-weight: 700;
        text-decoration: none;
        transition: all 0.3s ease;
        display: inline-block;
    }

        .btn-shop:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(255, 210, 63, 0.3);
            color: #1A1A1A;
            text-decoration: none;
        }

    /* Responsive Design */
    (max-width: 1024px) {
        .cart-content

    {
        grid-template-columns: 1fr;
        gap: 15px;
    }

    .payment-summary {
        position: static;
    }

    }

    (max-width: 768px) {
        .bannerHeadline

    {
        font-size: 2rem;
    }

    .heading.small {
        font-size: 1.8rem;
    }

    .cart-table-section,
    .payment-summary,
    .qr-container {
        padding: 10px;
        margin: 0 5px;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .table {
        min-width: 500px; /* Reduced width */
    }

        .table td, .table th {
            padding: 4px 2px; /* Reduced padding */
            font-size: 0.8rem; /* Reduced size */
        }

    .product-image-cell img {
        width: 20px; /* Reduced size */
        height: 20px; /* Reduced size */
    }

    #qrcodeImg {
        width: 120px;
        height: 120px;
    }

    }

    (max-width: 480px) {
        .container

    {
        padding: 0 5px;
    }

    .bannerHeadline {
        font-size: 1.5rem;
    }

    .heading.small {
        font-size: 1.4rem;
    }

    .table {
        min-width: 400px; /* Reduced width */
    }

    .btn-red {
        padding: 8px 15px;
        font-size: 0.8rem;
    }

    .payment-info p {
        flex-direction: column;
        align-items: flex-start;
        gap: 3px;
    }

    }

    /* Loading States */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #FFD23F;
        border-top: 4px solid #FF6B35;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 10px;
        border: 1px solid #888;
        width: 80%;
        max-width: 350px;
        border-radius: 5px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 20px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .form-group {
        margin-bottom: 10px;
    }

    .form-control {
        width: 100%;
        padding: 4px;
        box-sizing: border-box;
    }

    .btn {
        padding: 6px 0px;
        cursor: pointer;
        width: 160px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        margin-top: 10px;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    </text >
</style>

<!-- Hero Banner -->
<div class="innerbannerwrap">
    <div class="content"></div>
    <div class="innerbanner">
        <h2 class="bannerHeadline">chi tiết <span>giỏ hàng</span></h2>
    </div>
</div>

<!-- Main Cart Section -->
<section class="cart-page">
    <div class="container">
        <!-- Cart Header -->
        <div class="cart-header">
            <h2 class="heading small">giỏ hàng thanh toán</h2>
            <p class="headParagraph">
                Xem lại các sản phẩm trong giỏ hàng của bạn và tiến hành thanh toán dễ dàng, nhanh chóng.
                Chúng tôi hỗ trợ phương thức thanh toán an toàn và tiện lợi qua VietQR!
            </p>
        </div>

        <div id="errorMessage" class="alert alert-danger" style="display: none;"></div>
        <div id="emptyCart" class="empty-cart" style="display: none;">
            <h3>Giỏ hàng trống</h3>
            <p>Bạn chưa có sản phẩm nào trong giỏ hàng. Hãy khám phá cửa hàng của chúng tôi!</p>
            <a href="@Url.Action("Index", "Shop")" class="btn-shop">🛍️ Mua sắm ngay</a>
        </div>

        <div class="cart-content" id="cartContent" style="display: none;">
            <!-- Cart Table Section -->
            <div class="cart-table-section">
                <h3 class="section-title">Sản phẩm đã chọn</h3>
                <div class="table-responsive">
                    <table class="table">
                        <thead class="thead-dark">
                            <tr>
                                <th>Ảnh</th>
                                <th>Tên sản phẩm</th>
                                <th>Mã SP</th>
                                <th>Size</th>
                                <th>Số lượng</th>
                                <th>Đơn giá</th>

                                <th>Mô tả</th>
                                <th>Hành động</th>
                            </tr>
                        </thead>
                        <tbody id="cartBody"></tbody>
                        <tfoot>
                            <tr>
                                <td colspan="6">🧾 Tổng thanh toán:</td>
                                <td colspan="2" id="totalCartPrice"></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>

            <!-- Payment Summary Section -->
            <div class="payment-summary">
                <h3 class="summary-title">Tóm tắt đơn hàng</h3>
                <div class="summary-row">
                    <span>Tạm tính:</span>
                    <span id="subtotal"></span>
                </div>
                <div class="summary-row">
                    <span>Phí vận chuyển:</span>
                    <span style="color: #28a745; font-weight: 600;">Miễn phí</span>
                </div>
                <div class="summary-row">
                    <span>Giảm giá:</span>
                    <span style="color: #28a745; font-weight: 600;">0 đ</span>
                </div>
                <div class="summary-row">
                    <span>💰 Tổng cộng:</span>
                    <span id="total"></span>
                </div>
                <button id="generateQR" class="btn-red">🏦 Tạo mã QR thanh toán</button>
            </div>
        </div>

        <!-- Address Form Section -->
        <div class="address-form">
            <h5>Địa chỉ giao hàng</h5>
            <div class="form-group">
                <label for="addressSelect">Chọn địa chỉ đã lưu:</label>
                <select id="addressSelect" class="form-control">
                    <option value="">-- Chọn địa chỉ hoặc thêm mới --</option>
                </select>
            </div>
            <button id="addAddressBtn" class="btn btn-primary">Thêm Địa chỉ</button>
            <button id="updateAddressBtn" class="btn btn-primary" style="display: none;">Sửa  Địa Chỉ</button>
        </div>

        <!-- Add Address Modal -->
        <div id="addAddressModal" class="modal">
            <div class="modal-content">
                <span class="close">×</span>
                <h5>Thêm Địa chỉ Mới</h5>
                <div class="form-group">
                    <label for="addModalRecipientName">Tên người nhận:</label>
                    <input type="text" id="addModalRecipientName" class="form-control">
                </div>
                <div class="form-group">
                    <label for="addModalStreetAddress">Địa chỉ:</label>
                    <input type="text" id="addModalStreetAddress" class="form-control">
                </div>
                <div class="form-group">
                    <label for="addModalCityProvince">Thành phố/Tỉnh:</label>
                    <input type="text" id="addModalCityProvince" class="form-control">
                </div>
                <div class="form-group">
                    <label for="addModalPostalCode">Mã bưu điện:</label>
                    <input type="text" id="addModalPostalCode" class="form-control">
                </div>
                <button id="saveNewAddressBtn" class="btn btn-primary">Lưu Địa Chỉ</button>
            </div>
        </div>

        <!-- Update Address Modal (unchanged, included for completeness) -->
        <div id="addressModal" class="modal">
            <div class="modal-content">
                <span class="close">×</span>
                <h5>Chỉnh sửa Địa chỉ</h5>
                <div class="form-group">
                    <label for="modalRecipientName">Tên người nhận:</label>
                    <input type="text" id="modalRecipientName" class="form-control">
                </div>
                <div class="form-group">
                    <label for="modalStreetAddress">Địa chỉ:</label>
                    <input type="text" id="modalStreetAddress" class="form-control">
                </div>
                <div class="form-group">
                    <label for="modalCityProvince">Thành phố/Tỉnh:</label>
                    <input type="text" id="modalCityProvince" class="form-control">
                </div>
                <div class="form-group">
                    <label for="modalPostalCode">Mã bưu điện:</label>
                    <input type="text" id="modalPostalCode" class="form-control">
                </div>
                <button id="saveAddressBtn" class="btn btn-primary">Lưu</button>
            </div>
        </div>

        <!-- QR Code Section -->
        <div class="qr-container">
            <h4>Thanh toán VietQR</h4>
            <div id="paymentInfo" class="payment-info" style="display: none;"></div>
            <div class="qr-image-wrapper">
                <img id="qrcodeImg" src="" alt="QR Code" style="display:none;" />
                <div id="spinner" style="display:none;"></div>
            </div>
            <div id="successMessage" style="display:none;">Thanh toán thành công! Cảm ơn bạn đã mua hàng.</div>
        </div>
    </div>
</section>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let isPaid = false;
            let paymentCheckInterval;
            const maxWaitTime = 8 * 60 * 1000; // 8 phút
            let startTime;
            const qrCodeImg = document.getElementById('qrcodeImg');
            const spinner = document.getElementById('spinner');
            const successMessage = document.getElementById('successMessage');
            const paymentInfo = document.getElementById('paymentInfo');
            const generateQRButton = document.getElementById('generateQR');
            const addressSelect = document.getElementById('addressSelect');
            let paymentContent = "";
            let cartItems = [];
            let totalCartPrice = 0;

            const bankAccount = '@bankAccount';
            const bankID = '@bankID';
            const bankOwner = '@bankOwner';

            // Function to display error messages
            function showErrorMessage(message, redirectToLogin = false) {
                const errorMessageDiv = document.getElementById('errorMessage');
                errorMessageDiv.textContent = message;
                errorMessageDiv.style.display = 'block';
                setTimeout(() => {
                    errorMessageDiv.style.display = 'none';
                    if (redirectToLogin) {
                        window.location.href = '/Auth/Login';
                    }
                }, 2000); // Hide after 2 seconds, redirect if needed
            }

            // Lấy dữ liệu giỏ hàng từ API
            async function fetchCartData() {
                try {
                    const response = await fetch(https://api.soccer.soccertips.org/api/cart/checkout', {
                        method: 'GET',
                        credentials: 'include'
                    });
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    cartItems = await response.json();
                    console.log('Cart Items:', cartItems);
                    displayCartItems(cartItems);
                } catch (error) {
                    console.error('Error fetching cart data:', error);
                    showErrorMessage('Không thể tải dữ liệu giỏ hàng: ' + error.message);
                }
            }

            // Lấy danh sách kích thước sản phẩm
            async function fetchProductSizes(productId) {
                try {
                    const response = await fetch(`https://localhost:7237/api/cart/sizes/${productId}`, {
                        method: 'GET',
                        credentials: 'include'
                    });
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const sizes = await response.json();
                    return sizes.map(size => ({
                        sizeId: size.sizeName.sizeId,
                        sizeName: size.sizeName.sizeName
                    }));
                } catch (error) {
                    console.error('Error fetching sizes:', error);
                    return [];
                }
            }

            // Hiển thị sản phẩm trong giỏ hàng
            async function displayCartItems(items) {
                const cartBody = document.getElementById('cartBody');
                const totalCartPriceElement = document.getElementById('totalCartPrice');
                const subtotalElement = document.getElementById('subtotal');
                const totalElement = document.getElementById('total');
                totalCartPrice = 0;

                if (!items || items.length === 0) {
                    document.getElementById('emptyCart').style.display = 'block';
                    document.getElementById('cartContent').style.display = 'none';
                    return;
                }

                document.getElementById('emptyCart').style.display = 'none';
                document.getElementById('cartContent').style.display = 'grid';

                cartBody.innerHTML = '';
                for (const item of items) {
                    const totalPrice = item.quantity * item.unitPrice;
                    totalCartPrice += totalPrice;
                    const sizes = await fetchProductSizes(item.productId);
                    const sizeOptions = sizes.map(size =>
                        `<option value="${size.sizeId}" ${size.sizeId === item.sizeId ? 'selected' : ''}>${size.sizeName}</option>`
                    ).join('');

                    const row = `
                        <tr>
                            <td class="product-image-cell">
                                <img src="${getImageUrl(item.imageUrl)}" alt="${item.productName}"
                                     onerror="this.src='https://i.pinimg.com/564x/f8/e3/d9/f8e3d945eeb3f45efa550fa7c03ba79c.jpg';" />
                            </td>
                            <td><strong>${item.productName}</strong></td>
                            <td><span style="color: #FF6B35; font-weight: 600;">#${item.productId}</span></td>
                            <td>
                                <select class="size-select" data-product-id="${item.productId}" data-size-id="${item.sizeId}">
                                    ${sizeOptions}
                                </select>
                            </td>
                            <td>
                                <div class="quantity-controls">
                                    <button class="btn-quantity btn-minus" data-product-id="${item.productId}" data-size-id="${item.sizeId}">-</button>
                                    <span class="quantity-display">${item.quantity}</span>
                                    <button class="btn-quantity btn-plus" data-product-id="${item.productId}" data-size-id="${item.sizeId}">+</button>
                                </div>
                            </td>
                            <td><strong style="color: #C1272D;">${item.unitPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</strong></td>

                            <td><input type="text" class="description-input" data-product-id="${item.productId}" data-size-id="${item.sizeId}" value="${item.description || ''}" placeholder="Nhập mô tả..."></td>
                            <td><button class="btn-remove" data-product-id="${item.productId}" data-size-id="${item.sizeId}">Xóa</button></td>
                        </tr>
                    `;
                    cartBody.innerHTML += row;
                }

                // Thêm sự kiện cho các nút xóa
                document.querySelectorAll('.btn-remove').forEach(button => {
                    button.addEventListener('click', () => {
                        const productId = button.getAttribute('data-product-id');
                        removeItem(productId);
                    });
                });

                // Thêm sự kiện cho các nút tăng/giảm số lượng
                document.querySelectorAll('.btn-minus').forEach(button => {
                    button.addEventListener('click', async () => {
                        const productId = button.getAttribute('data-product-id');
                        const sizeId = button.getAttribute('data-size-id');
                        const item = cartItems.find(i => i.productId == productId && i.sizeId == sizeId);
                        if (item && item.quantity > 1) {
                            await updateCartItem(productId, sizeId, item.quantity - 1, item.description);
                        }
                    });
                });

                document.querySelectorAll('.btn-plus').forEach(button => {
                    button.addEventListener('click', async () => {
                        const productId = button.getAttribute('data-product-id');
                        const sizeId = button.getAttribute('data-size-id');
                        const item = cartItems.find(i => i.productId == productId && i.sizeId == sizeId);
                        await updateCartItem(productId, sizeId, item.quantity + 1, item.description);
                    });
                });

                document.querySelectorAll('.size-select').forEach(select => {
                    select.addEventListener('change', async () => {
                        const productId = select.getAttribute('data-product-id');
                        const newSizeId = select.value;
                        const currentSizeId = select.getAttribute('data-size-id');
                        const item = cartItems.find(i => i.productId == productId && i.sizeId == currentSizeId);

                        if (item) {
                            cartItems.find(i => i.productId == productId && i.sizeId == currentSizeId).sizeId = Number(newSizeId);
                            select.setAttribute('data-size-id', newSizeId);
                            await updateCartItem(productId, newSizeId, item.quantity, item.description);
                        }
                    });
                });

                document.querySelectorAll('.description-input').forEach(input => {
                    input.addEventListener('blur', async () => {
                        const productId = input.getAttribute('data-product-id');
                        const sizeId = input.getAttribute('data-size-id');
                        const description = input.value || null;
                        const item = cartItems.find(i => i.productId == productId && i.sizeId == sizeId);
                        if (item) {
                            item.description = description;
                            await updateCartItem(productId, sizeId, item.quantity, description);
                        }
                    });
                });

                totalCartPriceElement.textContent = totalCartPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                subtotalElement.textContent = totalCartPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                totalElement.textContent = totalCartPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
            }

            // Cập nhật giỏ hàng
            async function updateCartItem(productId, sizeId, quantity, description) {
                try {
                    const url = `https://localhost:7237/api/cart/update?productId=${Number(productId)}&sizeId=${Number(sizeId)}&quantity=${quantity}&description=${encodeURIComponent(description || '')}`;
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        credentials: 'include'
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`HTTP error! Status: ${response.status} - ${errorText}`);
                    }

                    const updatedItem = await response.json();
                    const itemIndex = cartItems.findIndex(i => i.productId == productId && i.sizeId == sizeId);
                    if (itemIndex !== -1) {
                        cartItems[itemIndex] = { ...cartItems[itemIndex], ...updatedItem, sizeId: Number(sizeId), quantity, description };
                    }
                    console.log('Cart item updated successfully');
                    await fetchCartData();
                } catch (error) {
                    console.error('Error updating cart item:', error);
                    showErrorMessage('Lỗi khi cập nhật giỏ hàng: ' + error.message);
                }
            }

            function getImageUrl(imageUrl) {
                return imageUrl?.startsWith("http://") || imageUrl?.startsWith("https://")
                    ? imageUrl
                    : `/images/${(imageUrl ?? "default-product").replace(/[ /]/g, "_")}.jpg`;
            }

            // Lấy danh sách địa chỉ
            async function fetchUserAddresses() {
                try {
                    const response = await fetch(https://api.soccer.soccertips.org/api/Cart/addresses', {
                        method: 'GET',
                        credentials: 'include'
                    });
                    if (!response.ok) {
                        if (response.status === 404) {
                            // Không có địa chỉ, hiển thị tùy chọn mặc định
                            addressSelect.innerHTML = '<option value="">-- Chọn địa chỉ hoặc thêm mới --</option>';
                            document.getElementById('updateAddressBtn').style.display = 'none';
                            return;
                        }
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const addresses = await response.json();
                    console.log('Addresses:', addresses);

                    addressSelect.innerHTML = '<option value="">-- Chọn địa chỉ hoặc thêm mới --</option>';
                    if (addresses.length === 0) {
                        document.getElementById('updateAddressBtn').style.display = 'none';
                    } else {
                        addresses.forEach(address => {
                            const option = document.createElement('option');
                            option.value = address.addressID;
                            option.textContent = `${address.streetAddress}, ${address.cityProvince}`;
                            addressSelect.appendChild(option);
                        });
                        document.getElementById('updateAddressBtn').style.display = 'block';
                    }
                } catch (error) {
                    console.error('Error fetching addresses:', error);
                    showErrorMessage('Lỗi khi tải danh sách địa chỉ: ' + error.message);
                }
            }

            // Thêm logic xóa sản phẩm
            async function removeItem(productId) {
                try {
                    const url = `https://localhost:7237/api/cart/remove?productId=${Number(productId)}`;
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        credentials: 'include',
                    });

                    const data = await response.json();
                    if (!response.ok) {
                        throw new Error(data.message || `HTTP error! Status: ${response.status}`);
                    }

                    await fetchCartData();
                    document.getElementById('errorMessage').style.display = 'none';
                    return data;
                } catch (error) {
                    console.error('Error details:', error);
                    showErrorMessage(`Lỗi khi xóa sản phẩm: ${error.message}`);
                    throw error;
                }
            }

            // Tạo mã QR thanh toán
            if (generateQRButton) {
                generateQRButton.addEventListener('click', async () => {
                    if (!addressSelect.value && cartItems.length > 0) {
                        showErrorMessage('Vui lòng chọn hoặc thêm địa chỉ giao hàng trước khi thanh toán!');
                        document.getElementById('addAddressModal').style.display = 'block';
                        return;
                    }

                    try {
                        // Kiểm tra xem người dùng có đăng nhập không bằng cách gọi API addresses
                        const response = await fetch(https://api.soccer.soccertips.org/api/Cart/addresses', {
                            method: 'GET',
                            credentials: 'include'
                        });
                        if (response.status === 401) {
                            showErrorMessage('Bạn cần đăng nhập để thanh toán!', true);
                            return;
                        }
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }

                        const randomDigits = Math.floor(10000 + Math.random() * 90000);
                        paymentContent = `STARTLIGHT${randomDigits}`;

                        const vietQRLink = `https://img.vietqr.io/image/${bankID}-${bankAccount}-compact2.png?amount=${totalCartPrice}&addInfo=${encodeURIComponent(paymentContent)}&accountName=${encodeURIComponent(bankOwner)}`;

                        paymentInfo.innerHTML = `
                            <p><strong>Nội dung chuyển khoản:</strong> <span>${paymentContent}</span></p>
                            <p><strong>Số tiền:</strong> <span>${totalCartPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</span></p>
                            <p><strong>Tên tài khoản:</strong> <span>${bankOwner}</span></p>
                            <p><strong>Số tài khoản:</strong> <span>${bankAccount}</span></p>
                            <p><strong>Ngân hàng:</strong> <span>${bankID}</span></p>
                        `;

                        paymentInfo.style.display = 'block';
                        qrCodeImg.src = vietQRLink;
                        qrCodeImg.style.display = "block";

                        generateQRButton.innerHTML = '⏳ Đang tạo QR...';
                        generateQRButton.disabled = true;

                        setTimeout(() => {
                            generateQRButton.innerHTML = '✅ QR đã tạo';
                            startPaymentCheck();
                        }, 1000);
                    } catch (error) {
                        console.error('Error generating QR:', error);
                        showErrorMessage('Lỗi khi tạo mã QR: ' + error.message);
                    }
                });
            }

            // Kiểm tra trạng thái thanh toán
            const startPaymentCheck = () => {
                startTime = Date.now();
                if (spinner) spinner.style.display = "block";
                if (successMessage) successMessage.style.display = "none";
                isPaid = false;

                paymentCheckInterval = setInterval(checkPaymentStatus, 5000);

                setTimeout(() => {
                    if (!isPaid) {
                        clearInterval(paymentCheckInterval);
                        if (spinner) spinner.style.display = "none";
                        alert("⏰ Hết thời gian chờ! Vui lòng quét lại mã QR để thanh toán.");
                        if (generateQRButton) {
                            generateQRButton.innerHTML = '🔄 Tạo lại mã QR';
                            generateQRButton.disabled = false;
                        }
                    }
                }, maxWaitTime);
            };

            const checkPaymentStatus = async () => {
                try {
                    const response = await fetch('https://script.google.com/macros/s/AKfycbzt1ULPE6Wk31IfEg8Wf_mOALhTmsSoDmyAlPIxp71jIKbnX4tnXZLf6FDz3A7VhovGSA/exec');
                    const result = await response.json();

                    if (result.error || !result.data) {
                        console.error("Lỗi API hoặc không có dữ liệu!");
                        return;
                    }

                    const transactions = result.data;
                    console.log("Danh sách giao dịch:", transactions);

                    const transaction = transactions.find(item =>
                        item["content"] === paymentContent &&
                        item["price"] == totalCartPrice &&
                        item["Số tài khoản"] === bankAccount
                    );

                    if (transaction && !isPaid) {
                        const confirmationResult = await confirmOrder();
                        if (confirmationResult.ok) {
                            isPaid = true;
                            clearInterval(paymentCheckInterval);
                            if (spinner) spinner.style.display = "none";
                            if (successMessage) {
                                successMessage.style.display = "block";
                                successMessage.textContent = `Đơn hàng đã được xác nhận! Mã đơn hàng: ${confirmationResult.orderId}`;
                            }
                            createConfetti();

                            setTimeout(() => {
                                window.location.href = '@Url.Action("Index", "Shop")';
                            }, 3000);
                        } else {
                            showErrorMessage(`Lỗi xác nhận đơn hàng: ${confirmationResult.message}`);
                        }
                    }
                } catch (error) {
                    console.error("Lỗi khi kiểm tra thanh toán:", error);
                    showErrorMessage('Lỗi khi kiểm tra thanh toán: ' + error.message);
                }
            };

            // Xác nhận đơn hàng
            async function confirmOrder() {
                const addressId = addressSelect.value || 0;
                const payload = {
                    addressId: addressId,
                    orderDescription: cartItems.map(item => ({
                        productId: item.productId,
                        sizeId: item.sizeId,
                        quantity: item.quantity,
                        description: item.description || null
                    }))
                };

                try {
                    const response = await fetch(https://api.soccer.soccertips.org/api/cart/confirm-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload),
                        credentials: 'include'
                    });

                    const result = await response.json();
                    if (response.ok) {
                        return { ok: true, orderId: result.orderId };
                    } else {
                        if (response.status === 401) {
                            showErrorMessage('Bạn cần đăng nhập để xác nhận thanh toán!', true);
                            return { ok: false, message: 'Bạn cần đăng nhập.' };
                        }
                        return { ok: false, message: result.message || 'Lỗi xác nhận đơn hàng.' };
                    }
                } catch (error) {
                    console.error('Error confirming order:', error);
                    return { ok: false, message: 'Lỗi xác nhận đơn hàng: ' + error.message };
                }
            }

            // Hiệu ứng confetti
            function createConfetti() {
                const colors = ['#FF6B35', '#FFD23F', '#C1272D', '#FF8C42'];
                const confettiContainer = document.createElement('div');
                confettiContainer.style.position = 'fixed';
                confettiContainer.style.top = '0';
                confettiContainer.style.left = '0';
                confettiContainer.style.width = '100%';
                confettiContainer.style.height = '100%';
                confettiContainer.style.pointerEvents = 'none';
                confettiContainer.style.zIndex = '9999';
                document.body.appendChild(confettiContainer);

                for (let i = 0; i < 50; i++) {
                    const confetti = document.createElement('div');
                    confetti.style.position = 'absolute';
                    confetti.style.width = '8px';
                    confetti.style.height = '8px';
                    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.left = Math.random() * 100 + '%';
                    confetti.style.animationDuration = Math.random() * 2.5 + 1.5 + 's';
                    confetti.style.animationName = 'fall';
                    confetti.style.animationIterationCount = '1';
                    confetti.style.animationFillMode = 'forwards';
                    confettiContainer.appendChild(confetti);
                }

                const style = document.createElement('style');
                style.textContent = `
        fall {
                        0% { transform: translateY(-100vh) rotate(0deg); opacity: 1; }
                        100% { transform: translateY(100vh) rotate(720deg); opacity: 0; }
                    }
                `;
                document.head.appendChild(style);

                setTimeout(() => {
                    document.body.removeChild(confettiContainer);
                    document.head.removeChild(style);
                }, 4000);
            }

            // Address Editing Logic
            const updateAddressBtn = document.getElementById('updateAddressBtn');
            const addressModal = document.getElementById('addressModal');
            const closeModal = document.querySelectorAll('.close');
            const saveAddressBtn = document.getElementById('saveAddressBtn');
            const addAddressBtn = document.getElementById('addAddressBtn');
            const addAddressModal = document.getElementById('addAddressModal');
            const saveNewAddressBtn = document.getElementById('saveNewAddressBtn');

            // Open update address modal
            updateAddressBtn.addEventListener('click', async () => {
                const addressId = addressSelect.value;
                if (!addressId) {
                    showErrorMessage('Vui lòng chọn địa chỉ để sửa!');
                    return;
                }

                try {
                    const response = await fetch(`https://localhost:7237/api/cart/addresses`, {
                        method: 'GET',
                        credentials: 'include'
                    });
                    if (response.status === 401) {
                        showErrorMessage('Bạn cần đăng nhập để sửa địa chỉ!', true);
                        return;
                    }
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const addresses = await response.json();
                    const selectedAddress = addresses.find(a => a.addressID == addressId);
                    if (selectedAddress) {
                        document.getElementById('modalRecipientName').value = selectedAddress.recipientName;
                        document.getElementById('modalStreetAddress').value = selectedAddress.streetAddress;
                        document.getElementById('modalCityProvince').value = selectedAddress.cityProvince;
                        document.getElementById('modalPostalCode').value = selectedAddress.postalCode;
                        addressModal.style.display = 'block';
                    } else {
                        showErrorMessage('Địa chỉ đã chọn không tồn tại.');
                    }
                } catch (error) {
                    console.error('Error fetching address details:', error);
                    showErrorMessage('Lỗi khi lấy thông tin địa chỉ: ' + error.message);
                }
            });

            // Save updated address
            saveAddressBtn.addEventListener('click', async () => {
                const addressId = addressSelect.value;
                const updatedAddress = {
                    AddressId: addressId,
                    RecipientName: document.getElementById('modalRecipientName').value,
                    StreetAddress: document.getElementById('modalStreetAddress').value,
                    CityProvince: document.getElementById('modalCityProvince').value,
                    PostalCode: document.getElementById('modalPostalCode').value
                };

                // Client-side validation
                if (!updatedAddress.RecipientName || !updatedAddress.StreetAddress || !updatedAddress.CityProvince || !updatedAddress.PostalCode) {
                    showErrorMessage('Vui lòng điền đầy đủ thông tin địa chỉ!');
                    return;
                }

                try {
                    const response = await fetch(`https://localhost:7237/api/cart/update-address`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(updatedAddress),
                        credentials: 'include'
                    });
                    if (response.ok) {
                        alert('Địa chỉ đã được cập nhật thành công!');
                        addressModal.style.display = 'none';
                        fetchUserAddresses();
                    } else {
                        if (response.status === 401) {
                            showErrorMessage('Bạn cần đăng nhập để cập nhật địa chỉ!', true);
                            return;
                        }
                        const error = await response.json();
                        showErrorMessage('Lỗi khi cập nhật địa chỉ: ' + (error.message || 'Vui lòng thử lại.'));
                    }
                } catch (error) {
                    console.error('Error updating address:', error);
                    showErrorMessage('Đã xảy ra lỗi khi cập nhật địa chỉ: ' + error.message);
                }
            });

            // Open add address modal
            addAddressBtn.addEventListener('click', async () => {
                try {
                    // Kiểm tra xem người dùng có đăng nhập không
                    const response = await fetch(https://api.soccer.soccertips.org/api/Cart/addresses', {
                        method: 'GET',
                        credentials: 'include'
                    });
                    if (response.status === 401) {
                        showErrorMessage('Bạn cần đăng nhập để thêm địa chỉ!', true);
                        return;
                    }
                    document.getElementById('addModalRecipientName').value = '';
                    document.getElementById('addModalStreetAddress').value = '';
                    document.getElementById('addModalCityProvince').value = '';
                    document.getElementById('addModalPostalCode').value = '';
                    addAddressModal.style.display = 'block';
                } catch (error) {
                    console.error('Error checking login status:', error);
                    showErrorMessage('Lỗi khi kiểm tra trạng thái đăng nhập: ' + error.message);
                }
            });

            // Save new address
            saveNewAddressBtn.addEventListener('click', async () => {
                const newAddress = {
                    RecipientName: document.getElementById('addModalRecipientName').value,
                    StreetAddress: document.getElementById('addModalStreetAddress').value,
                    CityProvince: document.getElementById('addModalCityProvince').value,
                    PostalCode: document.getElementById('addModalPostalCode').value
                };

                // Client-side validation
                if (!newAddress.RecipientName || !newAddress.StreetAddress || !newAddress.CityProvince || !newAddress.PostalCode) {
                    showErrorMessage('Vui lòng điền đầy đủ thông tin địa chỉ!');
                    return;
                }

                try {
                    const response = await fetch(https://api.soccer.soccertips.org/api/cart/add-address', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(newAddress),
                        credentials: 'include'
                    });
                    if (response.ok) {
                        alert('Địa chỉ mới đã được thêm thành công!');
                        addAddressModal.style.display = 'none';
                        fetchUserAddresses();
                    } else {
                        if (response.status === 401) {
                            showErrorMessage('Bạn cần đăng nhập để thêm địa chỉ!', true);
                            return;
                        }
                        const error = await response.json();
                        showErrorMessage('Lỗi khi thêm địa chỉ: ' + (error.message || 'Vui lòng thử lại.'));
                    }
                } catch (error) {
                    console.error('Error adding address:', error);
                    showErrorMessage('Đã xảy ra lỗi khi thêm địa chỉ: ' + error.message);
                }
            });

            // Close modals
            closeModal.forEach(closeBtn => {
                closeBtn.addEventListener('click', () => {
                    addressModal.style.display = 'none';
                    addAddressModal.style.display = 'none';
                });
            });

            window.addEventListener('click', (event) => {
                if (event.target == addressModal) {
                    addressModal.style.display = 'none';
                }
                if (event.target == addAddressModal) {
                    addAddressModal.style.display = 'none';
                }
            });

            // Tải dữ liệu khi trang được load
            fetchCartData();
            fetchUserAddresses();
        });
    </script>
}


